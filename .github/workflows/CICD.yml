name: CICD

on:
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Test
        run: |
          pip install -r requirements.txt
          # pip install pytest
          # pytest

  release:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const refs = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "tags/${{ github.head_ref }}-tag"
            })
            console.log(refs)
            if(refs.data.length > 0) {
              console.log("Tag already exists, skipping release")
              return
            }
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ github.head_ref }}-tag",
              name: "${{ github.head_ref }}",
              prerelease: true,
              target_commitish: "${{ github.head_ref }}"
            })
        env:
          GH_TOKEN: ${{ github.token }}

  build:
    runs-on: ubuntu-latest
    needs: release
    # if: github.ref == 'refs/heads/next' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      # - name: Python Semantic Release
      #   uses: python-semantic-release/python-semantic-release@master
      #   id: semantic-release
      #   with:
      #     github_token: ${{ secrets.TOKEN }}
      - name: Build
        run: |
          sed -i 's/version = "[0-9]*\.[0-9]*\.[0-9]*"/version = "0.0.0"/' pyproject.toml
          python3 -m pip install --upgrade build
          python3 -m build
      - name: Upload GH
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          files="dist/*.whl"
          for file in $files
          do
            echo $file
            counter=0
            for i in 1 2 3 4 5; do gh release upload --clobber --repo $GITHUB_REPOSITORY ${{ github.head_ref }}-tag $file && break || counter=$[$counter +1] && sleep 30; done
            echo $counter
            if [ "$counter" -eq "5" ]; then exit 1; fi
          done
        env:
          GITHUB_TOKEN: ${{ github.token }}
      # - name: Upload PYPI
      #   if: steps.semantic-release.outputs.released == 'true'
      #   run: |
      #     python3 -m pip install twine==6.0.1
      #     python3 -m twine upload --repository pypi dist/* -u __token__ -p ${{ secrets.PYPI_TOKEN }}
      # - name: Setup NODE
      #   uses: actions/setup-node@v3
      #   with:
      #     registry-url: "https://registry.npmjs.org"
      #     node-version: "20.x"
      # - name: Upload NPM
      #   if: steps.semantic-release.outputs.released == 'true'
      #   run: |
      #     pwd
      #     cd ${{ github.workspace }}
      #     npm i
      #     npm run json
      #     jq '.version="${{steps.semantic-release.outputs.version}}"' package.json > temp && mv temp package.json
      #     cat package.json
      #     npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      # - name: Merge master -> next
      #   if: github.ref == 'refs/heads/master'
      #   uses: devmasx/merge-branch@master
      #   with:
      #     type: now
      #     from_branch: master
      #     target_branch: next
      #     github_token: ${{ secrets.TOKEN }}
